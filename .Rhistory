state.names=c("Th1","Th2"))
lines(out[1:i,2:3],lwd=2, col="orange")
}}, video.name="movie4.mp4", other.opts = "-pix_fmt yuv420p -b 300k")
saveVideo({
ani.options(interval=0.1)
for (i in inds) {
#print(i)
params2 <- c(params, out[i,"P"])
flows <- flowField(derivs,
xlim=c(0,2000),
ylim=c(0,2000),
parameters=params,
system="two.dim",
state.names=c("Th1","Th2"),
add=FALSE)
clines <- nullclines(derivs,
xlim=c(0,2000),
ylim=c(0,2000),
parameters=params,
col=c(1,2),
lwd=2,
state.names=c("Th1","Th2"))
lines(out[1:i,2:3],lwd=2, col="orange")
}}, video.name="movie4.mp4", other.opts = "-pix_fmt yuv420p -b 300k")
flows <- flowField(derivs,
xlim=c(0,2000),
ylim=c(0,2000),
parameters=params,
system="two.dim",
state.names=c("Th1","Th2"),
add=FALSE)
derivs
saveVideo({
ani.options(interval=0.1)
for (i in inds) {
#print(i)
params2 <- c(params, out[i,"P"])
flows <- flowField(derivs,
xlim=c(0,2000),
ylim=c(0,2000),
parameters=params2,
system="two.dim",
state.names=c("Th1","Th2"),
add=FALSE)
clines <- nullclines(derivs,
xlim=c(0,2000),
ylim=c(0,2000),
parameters=params2,
col=c(1,2),
lwd=2,
state.names=c("Th1","Th2"))
lines(out[1:i,2:3],lwd=2, col="orange")
}}, video.name="movie4.mp4", other.opts = "-pix_fmt yuv420p -b 300k")
tail(out)
params = c(S1=1000, S2=1000, s1=2000, s2=2000, b1=0.1, b2=0.1, I12=10000, I21=10000, m=1, c1=1, c2=1, bp=0.1, Kp=120)
out <- gillespie_sim(50, y0=c(5, 5, 10), params=params, seed=seeds[1])
tail(out)
plot(out[,2:3], type='l')
params = c(S1=1000, S2=1000, s1=2000, s2=2000, b1=0.1, b2=0.1, I12=10000, I21=10000, m=1, c1=1, c2=1, bp=0.08, Kp=120)
out <- gillespie_sim(100, y0=c(5, 5, 10), params=params, seed=seeds[1])
tail(out)
params = c(S1=1000, S2=1000, s1=2000, s2=2000, b1=0.1, b2=0.1, I12=10000, I21=10000, m=1, c1=1, c2=1, bp=0.08, Kp=120)
out <- gillespie_sim(100, y0=c(5, 5, 10), params=params, seed=seeds[2])
tail(out)
params = c(S1=1000, S2=1000, s1=2000, s2=2000, b1=0.1, b2=0.1, I12=10000, I21=10000, m=1, c1=1.2, c2=1, bp=0.08, Kp=120)
out <- gillespie_sim(100, y0=c(5, 5, 10), params=params, seed=seeds[2])
tail(out)
params = c(S1=1000, S2=1000, s1=2000, s2=2000, b1=0.1, b2=0.1, I12=10000, I21=10000, m=1, c1=2, c2=1, bp=0.08, Kp=120)
out <- gillespie_sim(100, y0=c(5, 5, 10), params=params, seed=seeds[2])
params = c(S1=1000, S2=1000, s1=2000, s2=2000, b1=0.1, b2=0.1, I12=10000, I21=10000, m=1, c1=2, c2=1, bp=0.08, Kp=120)
out <- gillespie_sim(50, y0=c(5, 5, 10), params=params, seed=seeds[2])
print(t)
gillespie_sim <- function(tmax, y0, params, seed=NULL) {
if (!is.null(seed))
set.seed(seed)
s1 <- params["s1"]
s2 <- params["s2"]
b1 <- params["b1"]
b2 <- params["b2"]
I12 <- params["I12"]
I21 <- params["I21"]
S1 <- params["S1"]
S2 <- params["S2"]
m <- params["m"]
c1 <- params["c1"]
c2 <- params["c2"]
bp <- params["bp"]
Kp <- params["Kp"]
T1 <- y0[1]
T2 <- y0[2]
P <- y0[3]
t <- 0
## set up storage for everything
out <- array(0, dim=c(1e6, 4))
colnames(out) <- c("Time", "Th1", "Th2", "P")
out[1,] <- c(t, T1, T2, P)
i <- 2
while (t < tmax) {
print(t)
## compute event rates
prod1 <- b1 + c1*P + s1*T1^2/(S1^2+T1^2) * I12/(I12+T2)
prod2 <- b2 + c2*P + s2*T2^2/(S2^2+T2^2) * I21/(I21+T1)
death1 <- m*T1
death2 <- m*T2
birthP <- bp*P*(1-P/Kp)
rates <- c(prod1, prod2, death1, death2, birthP)
## what time does the event happen?
dt <- rexp(1, rate=sum(rates))
## update t
t <- t + dt
## "wheel of fortune"
wheel <- cumsum(rates)/sum(rates)
## which event happens? Draw a random uniform to determine
rand <- runif(1)
## if event==1, a new Th1 cell is produced
## if event==2, a new Th2 cell is produced
## if event==3, a Th1 cell is destroyed
## if event==4, a Th2 cell is destroyed
## if event==5, a parasite is "born"
event <- 1 + sum(rand > wheel)
if (event==1)
T1 <- T1 + 1
else if (event==2)
T2 <- T2 + 1
else if (event==3)
T1 <- T1 - 1
else if (event==4)
T2 <- T2 - 1
else
P <- P+1
out[i,] <- c(t, T1, T2, P)
i <- i + 1
#print(out[i,])
if (i > nrow(out)) ## add more rows
out <- rbind(out, array(0, dim=c(1e6, 4)))
}
out <- out[1:(i-1),]
return(out)
}
params = c(S1=1000, S2=1000, s1=2000, s2=2000, b1=0.1, b2=0.1, I12=10000, I21=10000, m=1, c1=2, c2=1, bp=0.08, Kp=120)
out <- gillespie_sim(50, y0=c(5, 5, 10), params=params, seed=seeds[2])
tail(out)
saveVideo({
ani.options(interval=0.1)
for (i in inds) {
#print(i)
params2 <- c(params, out[i,"P"])
flows <- flowField(derivs,
xlim=c(0,2000),
ylim=c(0,2000),
parameters=params2,
system="two.dim",
state.names=c("Th1","Th2"),
add=FALSE)
clines <- nullclines(derivs,
xlim=c(0,2000),
ylim=c(0,2000),
parameters=params2,
col=c(1,2),
lwd=2,
state.names=c("Th1","Th2"))
lines(out[1:i,2:3],lwd=2, col="orange")
}}, video.name="movie4.mp4", other.opts = "-pix_fmt yuv420p -b 300k")
head(out)
## Plot the isoclines and the Th1/Th2 trajectory as the parasite population grows
## What I want to do is create a series of plots (which will be turned into movies) that shows the Th1/Th2 balance and the isocline configuration every time P crosses a threshold (e.g., every 1 new parasite)
inds <- sapply(seq(0,50,0.5), function(p) min(which(out[,"Time"] > p)))
inds
out[inds,]
## Plot the isoclines and the Th1/Th2 trajectory as the parasite population grows
## What I want to do is create a series of plots (which will be turned into movies) that shows the Th1/Th2 balance and the isocline configuration every time P crosses a threshold (e.g., every 1 new parasite)
inds <- sapply(seq(0,50,0.25), function(p) min(which(out[,"Time"] > p)))
saveVideo({
ani.options(interval=0.1)
for (i in inds) {
#print(i)
params2 <- c(params, out[i,"P"])
flows <- flowField(derivs,
xlim=c(0,2000),
ylim=c(0,2000),
parameters=params2,
system="two.dim",
state.names=c("Th1","Th2"),
add=FALSE)
clines <- nullclines(derivs,
xlim=c(0,2000),
ylim=c(0,2000),
parameters=params2,
col=c(1,2),
lwd=2,
state.names=c("Th1","Th2"))
lines(out[1:i,2:3],lwd=2, col="orange")
}}, video.name="movie4.mp4", other.opts = "-pix_fmt yuv420p -b 300k")
params = c(S1=1000, S2=1000, s1=2000, s2=2000, b1=0.1, b2=0.1, I12=10000, I21=10000, m=1, c1=2, c2=1, bp=0.05, Kp=100)
out <- gillespie_sim(50, y0=c(5, 5, 10), params=params, seed=seeds[2])
tail(out)
out <- gillespie_sim(80, y0=c(5, 5, 10), params=params, seed=seeds[2])
tail(out)
saveVideo({
ani.options(interval=0.1)
for (i in inds) {
#print(i)
params2 <- c(params, out[i,"P"])
flows <- flowField(derivs,
xlim=c(0,2000),
ylim=c(0,2000),
parameters=params2,
system="two.dim",
state.names=c("Th1","Th2"),
add=FALSE)
clines <- nullclines(derivs,
xlim=c(0,2000),
ylim=c(0,2000),
parameters=params2,
col=c(1,2),
lwd=2,
state.names=c("Th1","Th2"))
lines(out[1:i,2:3],lwd=2, col="orange")
}}, video.name="movie4.mp4", other.opts = "-pix_fmt yuv420p -b 300k")
## Plot the isoclines and the Th1/Th2 trajectory as the parasite population grows
## What I want to do is create a series of plots (which will be turned into movies) that shows the Th1/Th2 balance and the isocline configuration every time P crosses a threshold (e.g., every 1 new parasite)
inds <- sapply(seq(0,79.75,0.25), function(p) min(which(out[,"Time"] > p)))
saveVideo({
ani.options(interval=0.1)
for (i in inds) {
#print(i)
params2 <- c(params, out[i,"P"])
flows <- flowField(derivs,
xlim=c(0,2000),
ylim=c(0,2000),
parameters=params2,
system="two.dim",
state.names=c("Th1","Th2"),
add=FALSE)
clines <- nullclines(derivs,
xlim=c(0,2000),
ylim=c(0,2000),
parameters=params2,
col=c(1,2),
lwd=2,
state.names=c("Th1","Th2"))
lines(out[1:i,2:3],lwd=2, col="orange")
}}, video.name="movie4.mp4", other.opts = "-pix_fmt yuv420p -b 300k")
seeds
seeds <- readRDS("seeds.RDS")
seeds
knitr::opts_chunk$set(echo = TRUE,
dev=c('png','tiff'),
fig.path='figures/')
seeds <- readRDS("seeds.RDS")
lapply(seq(0,5,0.1),
function(drug) {
print(drug)
pars <- c(theta=7.5+0.5*drug, chi=0.1, alpha1=0.1, alpha2=0.09, eta1=1500, eta2=1500, epsilon1=20, epsilon2=20, delta1=0.1, delta2=0.1, mu=0.001, D=drug, tDrug=150)
mclapply(seeds,
function(s) stochastic_strain_competition_w_drugs(500, tstep=1, pars=pars, y0=c(R=unname(pars["theta"]/pars["chi"]), P1=10, P2=0), seed=s),
mc.cores=4)
}) -> out_drug_anorexia_hi
library(parallel)
seeds <- readRDS("seeds.RDS")
seeds <- readRDS("seeds.RDS")
lapply(seq(0,5,0.1),
function(drug) {
print(drug)
pars <- c(theta=7.5+0.5*drug, chi=0.1, alpha1=0.1, alpha2=0.09, eta1=1500, eta2=1500, epsilon1=20, epsilon2=20, delta1=0.1, delta2=0.1, mu=0.001, D=drug, tDrug=150)
mclapply(seeds,
function(s) stochastic_strain_competition_w_drugs(500, tstep=1, pars=pars, y0=c(R=unname(pars["theta"]/pars["chi"]), P1=10, P2=0), seed=s),
mc.cores=4)
}) -> out_drug_anorexia_hi
stochastic_strain_competition_w_drugs <- function(tmax, tstep, pars, y0, seed) {
set.seed(seed)
theta <- pars["theta"]
chi <- pars["chi"]
alpha1 <- pars["alpha1"]
alpha2 <- pars["alpha2"]
eta1 <- pars["eta1"]
eta2 <- pars["eta2"]
epsilon1 <- pars["epsilon1"]
epsilon2 <- pars["epsilon2"]
delta1 <- pars["delta1"]
delta2 <- pars["delta2"]
mu <- pars["mu"]
D <- pars["D"]
tDrug <- pars["tDrug"]
## initialize the time at t = 0
t <- 0
R <- y0["R"]
P1 <- y0["P1"]
P2 <- y0["P2"]
## initialize a dataframe to store the time and population size
sim <- array(NA, dim=c(1e5, 4))
sim[1,] <- c(t,R,P1,P2)
i <- 2
## start the algorithm
while (t < tmax) {
## compute rates
rates <- c(theta, ## add resource = 1
chi*R, ## host resource use = 2
alpha1*R/(eta1+R)*P1, ## strain 1 resource consumption = 3
alpha2*R/(eta2+R)*P2, ## strain 2 resource consumption = 4
epsilon1*alpha1*R/(eta1+R)*P1, ## strain 1 replication = 5
epsilon2*alpha2*R/(eta2+R)*P2, ## strain 2 replication = 6
ifelse(P1 > 0, ifelse(t > tDrug, delta1*P1 + D, delta1*P1), 0), ## strain 1 death = 7
delta2*P2, ## strain 2 death = 8
mu*P1, ## strain 1 mutating to strain 2 = 9
mu*P2) ## strain 2 mutating to strain 1 = 10
## what time does the event happen?
dt <- rexp(1, rate=sum(rates))
## update t
t <- t + dt
## "wheel of fortune"
wheel <- cumsum(rates)/sum(rates)
## which event happens? Draw a random uniform to determine
rand <- runif(1)
event <- 1 + sum(rand > wheel)
if (event==1) R <- R + 1
else if (event%in%2:4) R <- R - 1
else if (event==5) P1 <- P1 + 1
else if (event==6) P2 <- P2 + 1
else if (event==7) P1 <- P1 - 1
else if (event==8) P2 <- P2 - 1
else if (event==9) { P1 <- P1 -1; P2 <- P2 + 1}
else {P1 <- P1 + 1; P2 <- P2 - 1}
sim[i,] <- c(t, R, P1, P2)
i <- i + 1
}
sim <- sim[1:(i-1),]
## Clean up: we're recording **way** too much information here - only record every tstep time steps
lapply(seq(0,tmax,tstep), function(t) c(t,sim[((sim[,1] > t) %>% which %>% min)-1,2:4])) %>% do.call(rbind.data.frame,.) -> sim2
colnames(sim2) <- c("t","R","P1","P2")
return(sim2)
}
lapply(seq(0,5,0.1),
function(drug) {
print(drug)
pars <- c(theta=7.5+0.5*drug, chi=0.1, alpha1=0.1, alpha2=0.09, eta1=1500, eta2=1500, epsilon1=20, epsilon2=20, delta1=0.1, delta2=0.1, mu=0.001, D=drug, tDrug=150)
mclapply(seeds,
function(s) stochastic_strain_competition_w_drugs(500, tstep=1, pars=pars, y0=c(R=unname(pars["theta"]/pars["chi"]), P1=10, P2=0), seed=s),
mc.cores=4)
}) -> out_drug_anorexia_hi
cutoff <- lapply(out_drug_anorexia_hi[[1]], function(o) tail(o[,4],10) %>% mean) %>% unlist %>% mean(.,na.rm=TRUE)
lapply(1:length(out_drug_anorexia_hi),
function(i) (lapply(out_drug_anorexia_hi[[i]], function(o) (ifelse((!is.na(tail(o[,4],1))),tail(o[,4],10) %>% mean,0) > 2*cutoff)) %>% unlist %>% sum)/length(out_drug_anorexia_hi[[i]])) %>% unlist -> emergeProb
emergeProb
lapply(seq(0,5,0.1),
function(drug) {
print(drug)
pars <- c(theta=10, chi=0.1, alpha1=0.1, alpha2=0.09, eta1=1500, eta2=1500, epsilon1=20, epsilon2=20, delta1=0.1, delta2=0.1, mu=0.001, D=drug, tDrug=150)
mclapply(seeds,
function(s) stochastic_strain_competition_w_drugs(500, tstep=1, pars=pars, y0=c(R=unname(pars["theta"]/pars["chi"]), P1=10, P2=0), seed=s),
mc.cores=4)
}) -> out_drug_no_anorexia_hi
lapply(1:length(out_drug_anorexia_hi),
function(i) (lapply(out_drug_anorexia_hi[[i]], function(o) (ifelse((!is.na(tail(o[,4],1))),tail(o[,4],10) %>% mean,0) > 2*cutoff)) %>% unlist %>% sum)/length(out_drug_anorexia_hi[[i]])) %>% unlist -> emergeProb_w_anorexia
lapply(1:length(out_drug_no_anorexia_hi),
function(i) (lapply(out_drug_no_anorexia_hi[[i]], function(o) (ifelse((!is.na(tail(o[,4],1))),tail(o[,4],10) %>% mean,0) > 2*cutoff)) %>% unlist %>% sum)/length(out_drug_no_anorexia_hi[[i]])) %>% unlist -> emergeProb_wout_anorexia
par(mar=c(3,5,0.5,0.5))
plot(seq(0,5,0.25), emergeProb_wout_anorexia, pch=21, bg=1, cex=1.5, xaxt='n', ylab="Probability of resistance", cex.lab=1.5, cex.axis=1.65)
par(mar=c(3,5,0.5,0.5))
plot(seq(0,5,0.1), emergeProb_wout_anorexia, pch=21, bg=1, cex=1.5, xaxt='n', ylab="Probability of resistance", cex.lab=1.5, cex.axis=1.65)
axis(1,tick=TRUE,labels=FALSE)
mtext(side=1, line=1.5, "Drug dose", cex=1.65)
out_drug_no_anorexia_hi[[1]]
lapply(out_drug_no_anorexia_hi[[1]], function(o) tail(o[,4],1))
lapply(out_drug_no_anorexia_hi[[1]], function(o) tail(o[,4],1)) %>% unlist
lapply(out_drug_no_anorexia_hi[[2]], function(o) tail(o[,4],1)) %>% unlist
lapply(out_drug_no_anorexia_hi[[3]], function(o) tail(o[,4],1)) %>% unlist
lapply(out_drug_no_anorexia_hi[[33]], function(o) tail(o[,4],1)) %>% unlist
cutoff
lapply(out_drug_anorexia_hi[[1]], function(o) tail(o[,4],10) %>% mean) %>% unlist %>% mean(.,na.rm=TRUE)
cutoff <- lapply(out_drug_no_anorexia_hi[[1]], function(o) tail(o[,4],10) %>% mean) %>% unlist %>% mean(.,na.rm=TRUE)
cutoff
lapply(1:length(out_drug_anorexia_hi),
function(i) (lapply(out_drug_anorexia_hi[[i]], function(o) (ifelse((!is.na(tail(o[,4],1))),tail(o[,4],10) %>% mean,0) > 2*cutoff)) %>% unlist %>% sum)/length(out_drug_anorexia_hi[[i]])) %>% unlist -> emergeProb_w_anorexia
lapply(1:length(out_drug_no_anorexia_hi),
function(i) (lapply(out_drug_no_anorexia_hi[[i]], function(o) (ifelse((!is.na(tail(o[,4],1))),tail(o[,4],10) %>% mean,0) > 2*cutoff)) %>% unlist %>% sum)/length(out_drug_no_anorexia_hi[[i]])) %>% unlist -> emergeProb_wout_anorexia
par(mar=c(3,5,0.5,0.5))
plot(seq(0,5,0.1), emergeProb_wout_anorexia, pch=21, bg=1, cex=1.5, xaxt='n', ylab="Probability of resistance", cex.lab=1.5, cex.axis=1.65)
axis(1,tick=TRUE,labels=FALSE)
mtext(side=1, line=1.5, "Drug dose", cex=1.65)
points(seq(0,0.5,0.1), emergeProb_w_anorexia, pch=21, bg=2, cex=1.5)
length(emergeProb_w_anorexia)
seq(0,5,0.1) %>% length
points(seq(0,0.5,0.1), emergeProb_w_anorexia, pch=21, bg=2, cex=1.5)
d = seq(0,0.5,0.1)
length(d)
points(seq(0,5,0.1), emergeProb_w_anorexia, pch=21, bg=2, cex=1.5)
par(mar=c(3,5,0.5,0.5))
plot(seq(0,5,0.1), emergeProb_wout_anorexia, pch=21, bg=1, cex=1.5, xaxt='n', ylab="Probability of resistance", cex.lab=1.5, cex.axis=1.65, ylim=c(0,0.5))
points(seq(0,5,0.1), emergeProb_w_anorexia, pch=21, bg=2, cex=1.5)
axis(1,tick=TRUE,labels=FALSE)
mtext(side=1, line=1.5, "Drug dose", cex=1.65)
View(out8)
rm(out8)
rm(out8.2)
par(mar=c(3,5,0.5,0.5))
plot(seq(0,5,0.1), emergeProb_wout_anorexia, pch=21, bg=1, cex=1.5, xaxt='n', ylab="Probability of resistance", cex.lab=1.5, cex.axis=1.65, ylim=c(0,0.5))
axis(1,tick=TRUE,labels=FALSE)
mtext(side=1, line=1.5, "Drug dose", cex=1.65)
lapply(seq(0,5,0.1),
function(drug) {
print(drug)
pars <- c(theta=7.5+0.5*drug, chi=0.1, alpha1=0.1, alpha2=0.09, eta1=1500, eta2=1500, epsilon1=20, epsilon2=20, delta1=0.1, delta2=0.1, mu=0.0001, D=drug, tDrug=150)
mclapply(seeds,
function(s) stochastic_strain_competition_w_drugs(500, tstep=1, pars=pars, y0=c(R=unname(pars["theta"]/pars["chi"]), P1=10, P2=0), seed=s),
mc.cores=4)
}) -> out_drug_anorexia_lo
lapply(seq(0,5,0.1),
function(drug) {
print(drug)
pars <- c(theta=7.5+0.5*drug, chi=0.1, alpha1=0.1, alpha2=0.09, eta1=1500, eta2=1500, epsilon1=20, epsilon2=20, delta1=0.1, delta2=0.1, mu=0.0001, D=drug, tDrug=150)
mclapply(seeds,
function(s) stochastic_strain_competition_w_drugs(500, tstep=1, pars=pars, y0=c(R=unname(pars["theta"]/pars["chi"]), P1=10, P2=0), seed=s),
mc.cores=4)
}) -> out_drug_no_anorexia_lo
cutoff <- lapply(out_drug_anorexia_lo[[1]], function(o) tail(o[,4],10) %>% mean) %>% unlist %>% mean(.,na.rm=TRUE)
lapply(1:length(out_drug_anorexia_lo),
function(i) (lapply(out_drug_anorexia_lo[[i]], function(o) (ifelse((!is.na(tail(o[,4],1))),tail(o[,4],10) %>% mean,0) > 2*cutoff)) %>% unlist %>% sum)/length(out_drug_anorexia_lo[[i]])) %>% unlist -> emergeProb_w_anorexia
emergeProb_w_anorexia
cutoff
lapply(seq(0,5,0.1),
function(drug) {
print(drug)
pars <- c(theta=7.5+0.5*drug, chi=0.1, alpha1=0.1, alpha2=0.09, eta1=1500, eta2=1500, epsilon1=20, epsilon2=20, delta1=0.1, delta2=0.1, mu=0.0001, D=drug, tDrug=150)
mclapply(seeds,
function(s) stochastic_strain_competition_w_drugs(500, tstep=1, pars=pars, y0=c(R=unname(pars["theta"]/pars["chi"]), P1=10, P2=0), seed=s),
mc.cores=4)
}) -> out_drug_no_anorexia_lo
cutoff <- lapply(out_drug_no_anorexia_lo[[1]], function(o) tail(o[,4],10) %>% mean) %>% unlist %>% mean(.,na.rm=TRUE)
lapply(1:length(out_drug_no_anorexia_hi),
function(i) (lapply(out_drug_no_anorexia_hi[[i]], function(o) (ifelse((!is.na(tail(o[,4],1))),tail(o[,4],10) %>% mean,0) > 2*cutoff)) %>% unlist %>% sum)/length(out_drug_no_anorexia_hi[[i]])) %>% unlist -> emergeProb_wout_anorexia
cutoff
lapply(out_drug_no_anorexia_lo[[1]], function(o) tail(o[,4],10) %>% mean) %>% unlist %>% mean(.,na.rm=TRUE)
t
lapply(out_drug_no_anorexia_lo[[1]], function(o) tail(o[,4],10) %>% mean) %>% unlist
lapply(out_drug_no_anorexia_lo[[2]], function(o) tail(o[,4],10) %>% mean) %>% unlist
lapply(out_drug_no_anorexia_lo[[3]], function(o) tail(o[,4],10) %>% mean) %>% unlist
lapply(out_drug_no_anorexia_lo[[51]], function(o) tail(o[,4],10) %>% mean) %>% unlist
lapply(1:length(out_drug_anorexia_lo),
function(i) (lapply(out_drug_anorexia_lo[[i]], function(o) (ifelse((!is.na(tail(o[,4],1))),tail(o[,4],10) %>% mean,0) > 2*cutoff)) %>% unlist %>% sum)/length(out_drug_anorexia_lo[[i]])) %>% unlist -> emergeProb_w_anorexia_lo
lapply(1:length(out_drug_no_anorexia_hi),
function(i) (lapply(out_drug_no_anorexia_hi[[i]], function(o) (ifelse((!is.na(tail(o[,4],1))),tail(o[,4],10) %>% mean,0) > 2*cutoff)) %>% unlist %>% sum)/length(out_drug_no_anorexia_hi[[i]])) %>% unlist -> emergeProb_wout_anorexia_lo
emergeProb_w_anorexia_lo
emergeProb_wout_anorexia_lo
lapply(1:length(out_drug_no_anorexia_lo),
function(i) (lapply(out_drug_no_anorexia_lo[[i]], function(o) (ifelse((!is.na(tail(o[,4],1))),tail(o[,4],10) %>% mean,0) > 2*cutoff)) %>% unlist %>% sum)/length(out_drug_no_anorexia_lo[[i]])) %>% unlist -> emergeProb_wout_anorexia_lo
emergeProb_wout_anorexia_lo
emergeProb_w_anorexia_lo
lapply(seq(0,5,0.1),
function(drug) {
print(drug)
pars <- c(theta=10, chi=0.1, alpha1=0.1, alpha2=0.09, eta1=1500, eta2=1500, epsilon1=20, epsilon2=20, delta1=0.1, delta2=0.1, mu=0.0001, D=drug, tDrug=150)
mclapply(seeds,
function(s) stochastic_strain_competition_w_drugs(500, tstep=1, pars=pars, y0=c(R=unname(pars["theta"]/pars["chi"]), P1=10, P2=0), seed=s),
mc.cores=4)
}) -> out_drug_no_anorexia_lo
saveRDS(out_drug_anorexia_hi, file="out_drug_anorexia_hi.RDS")
saveRDS(out_no_drug_anorexia_hi, file="out_no_drug_anorexia_hi.RDS")
saveRDS(out_drug_anorexia_hi, file="out_drug_anorexia_hi.RDS")
saveRDS(out_drug_no_anorexia_hi, file="out_drug_no_anorexia_hi.RDS")
saveRDS(out_drug_anorexia_lo, file="out_drug_anorexia_lo.RDS")
saveRDS(out_drug_no_anorexia_lo, file="out_drug_no_anorexia_lo.RDS")
cutoff <- lapply(out_drug_no_anorexia_lo[[1]], function(o) tail(o[,4],10) %>% mean) %>% unlist %>% mean(.,na.rm=TRUE)
cutoff
lapply(1:length(out_drug_anorexia_lo),
function(i) (lapply(out_drug_anorexia_lo[[i]], function(o) (ifelse((!is.na(tail(o[,4],1))),tail(o[,4],10) %>% mean,0) > 2*cutoff)) %>% unlist %>% sum)/length(out_drug_anorexia_lo[[i]])) %>% unlist -> emergeProb_w_anorexia_lo
lapply(1:length(out_drug_no_anorexia_lo),
function(i) (lapply(out_drug_no_anorexia_lo[[i]], function(o) (ifelse((!is.na(tail(o[,4],1))),tail(o[,4],10) %>% mean,0) > 2*cutoff)) %>% unlist %>% sum)/length(out_drug_no_anorexia_lo[[i]])) %>% unlist -> emergeProb_wout_anorexia_lo
emergeProb_w_anorexia_lo
emergeProb_wout_anorexia_lo
par(mar=c(3,5,0.5,0.5))
plot(seq(0,5,0.1), emergeProb_wout_anorexia_lo, pch=21, bg=1, cex=1.5, xaxt='n', ylab="Probability of resistance", cex.lab=1.5, cex.axis=1.65, ylim=c(0,0.5))
axis(1,tick=TRUE,labels=FALSE)
mtext(side=1, line=1.5, "Drug dose", cex=1.65)
par(mar=c(3,5,0.5,0.5))
plot(seq(0,5,0.1), emergeProb_wout_anorexia_lo, pch=21, bg=1, cex=1.5, xaxt='n', ylab="Probability of resistance", cex.lab=1.5, cex.axis=1.65, ylim=c(0,0.25))
axis(1,tick=TRUE,labels=FALSE)
mtext(side=1, line=1.5, "Drug dose", cex=1.65)
par(mar=c(3,5,0.5,0.5))
plot(seq(0,5,0.1), emergeProb_wout_anorexia_lo, pch=21, bg=1, cex=1.5, xaxt='n', ylab="Probability of resistance", cex.lab=1.5, cex.axis=1.65)
axis(1,tick=TRUE,labels=FALSE)
mtext(side=1, line=1.5, "Drug dose", cex=1.65)
abline(lm(emergeProb_wout_anorexia_lo~dose+dose2))
par(mar=c(3,5,0.5,0.5))
plot(seq(0,5,0.1), emergeProb_wout_anorexia_lo, pch=21, bg=1, cex=1.5, xaxt='n', ylab="Probability of resistance", cex.lab=1.5, cex.axis=1.65)
axis(1,tick=TRUE,labels=FALSE)
mtext(side=1, line=1.5, "Drug dose", cex=1.65)
dose <- seq(0,5,0.1); dose2 <- dose^2
abline(lm(emergeProb_wout_anorexia_lo~dose+dose2))
lm(emergeProb_wout_anorexia_lo~dose+dose2)
coef(lm(emergeProb_wout_anorexia_lo~dose+dose2))
coef(lm(emergeProb_wout_anorexia_lo~dose+dose2))
predict(lm(emergeProb_wout_anorexia_lo~dose+dose2), dose)
?predict.lm
predict(lm(emergeProb_wout_anorexia_lo~dose+dose2), newdata=data.frame(dose=dose))
par(mar=c(3,5,0.5,0.5))
plot(seq(0,5,0.1), emergeProb_wout_anorexia_lo, pch=21, bg=1, cex=1.5, xaxt='n', ylab="Probability of resistance", cex.lab=1.5, cex.axis=1.65)
axis(1,tick=TRUE,labels=FALSE)
mtext(side=1, line=1.5, "Drug dose", cex=1.65)
dose <- seq(0,5,0.1); dose2 <- dose^2
lines(dose, predict(lm(emergeProb_wout_anorexia_lo~dose+dose2), newdata=data.frame(dose=dose)), col=2)
par(mar=c(3,5,0.5,0.5))
plot(seq(0,5,0.1), emergeProb_wout_anorexia_lo, pch=21, bg=1, cex=1.5, xaxt='n', ylab="Probability of resistance", cex.lab=1.5, cex.axis=1.65)
axis(1,tick=TRUE,labels=FALSE)
mtext(side=1, line=1.5, "Drug dose", cex=1.65)
dose <- seq(0,5,0.1); dose2 <- dose^2
lines(dose, predict(lm(emergeProb_wout_anorexia_lo~dose+dose2), newdata=data.frame(dose=dose)), col=2, lwd=2)
par(mar=c(3,5,0.5,0.5))
plot(seq(0,5,0.1), emergeProb_wout_anorexia_lo, pch=21, bg=1, cex=1.5, xaxt='n', ylab="Probability of resistance", cex.lab=1.5, cex.axis=1.65, ylim=c(0,0.25))
axis(1,tick=TRUE,labels=FALSE)
mtext(side=1, line=1.5, "Drug dose", cex=1.65)
points(seq(0,5,0.1), emergeProb_w_anorexia_lo, pch=21, bg=2, cex=1.5)
