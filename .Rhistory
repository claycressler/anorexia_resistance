if (event==1) N <- N + 1
else N <- N - 1
## what time did the event happen?
dt <- rexp(1, rate=sum(rates))
## update the results
sim <- rbind(sim, c(t+dt, N))
}
tmax = 100
while (t < tmax) {
## compute the birth and death rates
brate <- (b - bs*N) * N
drate <- (d + ds*N) * N
rates <- c(brate, drate)
## "wheel of fortune"
wheel <- cumsum(rates)/sum(rates)
## which event happens? Draw a random uniform to determine
rand <- runif(1)
## if event==1, a birth happens
## if event==2, a death happens
event <- 1 + sum(rand > wheel)
if (event==1) N <- N + 1
else N <- N - 1
## what time did the event happen?
dt <- rexp(1, rate=sum(rates))
## update the results
sim <- rbind(sim, c(t+dt, N))
}
b <- pars["b"]
bs <- pars["bs"]
d <- pars["d"]
ds <- pars["ds"]
## initialize the time at t = 0
t <- 0
## initialize a vector to store the time and population size
## Note: I am going to show you the easiest way to store the results, but it is not the fastest, computationally
sim <- c(t, N0)
## current population size
N <- N0
while (t < tmax) {
## compute the birth and death rates
brate <- (b - bs*N) * N
drate <- (d + ds*N) * N
rates <- c(brate, drate)
## "wheel of fortune"
wheel <- cumsum(rates)/sum(rates)
## which event happens? Draw a random uniform to determine
rand <- runif(1)
## if event==1, a birth happens
## if event==2, a death happens
event <- 1 + sum(rand > wheel)
if (event==1) N <- N + 1
else N <- N - 1
## what time did the event happen?
dt <- rexp(1, rate=sum(rates))
## update t
t <- t + dt
## update the results
sim <- rbind(sim, c(t, N))
}
sim
library(deSolve)
?ode
logistic <- function(t, y, pars) {
b <- pars["b"]
bs <- pars["bs"]
d <- pars["d"]
ds <- pars["ds"]
N <- y
dNdt <- (b - bs*N) * N - (d + ds*N) * N
return(list(dNdt))
}
## Parameters
pars <- c(b=2, d=0.4, bs=0.01, ds=0.01)
tmax <- 100
## Initial population size
N0 <- 10
det_out <- ode(y=N0, times=seq(0,tmax,0.1), func=logistic, parms=pars, method="lsoda")
tail(det_out)
gillespie_logistic <- function(tmax, pars, N0) {
b <- pars["b"]
bs <- pars["bs"]
d <- pars["d"]
ds <- pars["ds"]
## initialize the time at t = 0
t <- 0
## initialize a vector to store the time and population size
## Note: I am going to show you the easiest way to store the results, but it is not the fastest, computationally
sim <- c(t, N0)
## current population size
N <- N0
## start the algorithm
while (t < tmax) {
## compute the birth and death rates
brate <- (b - bs*N) * N
drate <- (d + ds*N) * N
rates <- c(brate, drate)
## "wheel of fortune"
wheel <- cumsum(rates)/sum(rates)
## which event happens? Draw a random uniform to determine
rand <- runif(1)
## if event==1, a birth happens
## if event==2, a death happens
event <- 1 + sum(rand > wheel)
if (event==1) N <- N + 1
else N <- N - 1
## what time did the event happen?
dt <- rexp(1, rate=sum(rates))
## update t
t <- t + dt
## update the results
sim <- rbind(sim, c(t, N))
}
return(sim)
}
## simulate the Gillespie algorithm
stoch_out <- gillespie_logistic(tmax, pars, N0)
tail(stoch_out)
plot(det_out[,1], det_out[,2], type='l', lwd=2)
lines(stoch_out[,1], stoch_out[,2], lwd=2, lty=2, col=2)
plot(det_out[,1], det_out[,2], type='l', lwd=2, ylim=range(stoch_out[,2]))
lines(stoch_out[,1], stoch_out[,2], lwd=2, lty=2, col=2)
plot(stoch_out[,1], stoch_out[,2], type='l', lwd=2, col=2)
lines(det_out[,1], det_out[,2], lwd=2)
library(tidyverse)
## Read in all of the data on Covid-19 at the state level
x <- read.csv(url("https://covidtracking.com/api/v1/states/daily.csv"))
## Read in the population sizes of every state to make appropriate per 100k calculations
y <- read.csv(url("https://www2.census.gov/programs-surveys/popest/datasets/2010-2019/state/detail/SCPRC-EST2019-18+POP-RES.csv"))
## add abbreviations to census data
y$state <- c("USA","AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ",'NM','NY','NC','ND','OH','OK','OR','PA','RI','SC','SD','TN','TX','UT','VT','VA','WA','WV','WI','WY','PR')
## read in GDP data
read.csv("~/Downloads/download.csv") %>%
subset(., LineCode==1) %>%
mutate(., NAME=GeoName, GDP=X2019) %>%
merge(y, .) -> y
## merge the two datasets into a single dataset
merge(x,y,by='state') -> z
z$GDP <- as.numeric(as.character(z$GDP))
## calculate statistics
mutate(z,
date=date %>% as.character %>% as.Date(., format="%Y%m%d"),
totTests=positive+negative,
infectedCurrently=ifelse(!is.na(recovered),positive-recovered,positive),
fracHospitalized=hospitalizedCurrently/infectedCurrently,
totCaseFatality=death/positive*100,
hospCaseFatality=death/hospitalized*100,
casesPer100k=positive/POPESTIMATE2019*100000,
testsPer100k=totTests/POPESTIMATE2019*100000,
deathsPer100k=death/POPESTIMATE2019*100000,
newCasesPer100k=positiveIncrease/POPESTIMATE2019*100000,
newTestsPer100k=totalTestResultsIncrease/POPESTIMATE2019*100000,
newDeathsPer100k=deathIncrease/POPESTIMATE2019*100000,
testPosRate=positive/totTests) -> z
## Drop some territories where I don't have population data
z[!(z$state %in% (sapply(levels(z$state), function(s) with(subset(z, state==s),all(is.na(casesPer100k)))) %>% which %>% names)),] -> z
z$state <- factor(z$state)
levels(z$state)
X <- 35
n <- 7
lapply(seq(max(z$date)-X, max(z$date), 1),
function(d)
subset(z, date > d-n & date <= d) %>% group_by(state) %>% summarise(date=d, casesPer100k=mean(newCasesPer100k,na.rm=T), testsPer100k=mean(newTestsPer100k,na.rm=T), testPosRate=mean(positiveIncrease/totalTestResultsIncrease,na.rm=T), deathsPer100k=mean(newDeathsPer100k,na.rm=T))
) %>% do.call("rbind.data.frame",.) -> a
## use colors, linewidths, and level ordering to highlight specific states
specifyState <- c("NE") ## Change this line to focus on different states of interest
stateColors <- data.frame(state=levels(a$state),
stateColor=1)
stateColors$stateColor[stateColors$state%in%specifyState] <- 2.5
## these two lines make the chosen states the last to be plotted
for (i in specifyState) {a$state <- relevel(a$state, i); z$state <- relevel(z$state, i)}
a$state <- factor(a$state, levels=rev(levels(a$state)))
z$state <- factor(z$state, levels=rev(levels(z$state)))
par(mfrow=c(2,2), mar=c(3,5,0.5,0.5), oma=rep(0,4))
plot.new()
plot.window(xlim=c(max(a$date,na.rm=T)-X, max(a$date,na.rm=T)+2), ylim=range(subset(a, date >= max(date)-X)$casesPer100k, na.rm=T))
axis(2); axis(1, at=seq(a$date %>% as.numeric() %>% max-X,a$date %>% as.numeric() %>% max,by=7), labels=seq(max(a$date)-X, max(a$date), 7)); box('plot')
mtext(side=2, line=3, "Cases/100k")
sapply(levels(a$state), function(s) with(subset(a, state==s), lines(date[order(date)], casesPer100k[order(date)], col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2), lwd=stateColors$stateColor[which(stateColors$state==s)])))
sapply(levels(a$state), function(s) with(subset(a, state==s), text(max(date)+2, tail(casesPer100k,1), s, col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2))))
## Testing per 100k population
plot.new()
plot.window(xlim=c(max(a$date,na.rm=T)-X, max(a$date,na.rm=T)+2), ylim=c(0,max(subset(a, date >= max(date)-X)$testsPer100k, na.rm=T)))
axis(2); axis(1, at=seq(a$date %>% as.numeric() %>% max-X,a$date %>% as.numeric() %>% max,by=7), labels=seq(max(a$date)-X, max(a$date), 7)); box('plot')
mtext(side=2, line=3, "Tests/100k")
sapply(levels(a$state), function(s) with(subset(a, state==s), lines(date[order(date)], testsPer100k[order(date)], col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2), lwd=stateColors$stateColor[which(stateColors$state==s)])))
sapply(levels(a$state), function(s) with(subset(a, state==s), text(max(date)+2, tail(testsPer100k,1), s, col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2))))
## Test positivity rate (fraction of all tests that are positive )
plot.new()
plot.window(xlim=c(max(a$date,na.rm=T)-X, max(a$date,na.rm=T)+2), ylim=c(0,0.4))
axis(2); axis(1, at=seq(a$date %>% as.numeric() %>% max-X,a$date %>% as.numeric() %>% max,by=7), labels=seq(max(a$date)-X, max(a$date), 7)); box('plot')
mtext(side=2, line=3, "Case positivity")
sapply(levels(a$state), function(s) with(subset(a, state==s), lines(date[order(date)], testPosRate[order(date)], col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2), lwd=stateColors$stateColor[which(stateColors$state==s)])))
sapply(levels(a$state), function(s) with(subset(a, state==s), text(max(date)+2, tail(testPosRate[order(date)],1), s, col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2))))
## Deaths per 100k
plot.new()
plot.window(xlim=c(max(a$date,na.rm=T)-X, max(a$date,na.rm=T)+2), ylim=range(subset(a, date >= max(date)-X)$deathsPer100k, na.rm=T))
axis(2); axis(1, at=seq(a$date %>% as.numeric() %>% max-X,a$date %>% as.numeric() %>% max,by=7), labels=seq(max(a$date)-X, max(a$date), 7)); box('plot')
mtext(side=2, line=3, "Deaths/100k")
sapply(levels(a$state), function(s) with(subset(a, state==s), lines(date[order(date)], deathsPer100k[order(date)], col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2), lwd=stateColors$stateColor[which(stateColors$state==s)])))
sapply(levels(a$state), function(s) with(subset(a, state==s), text(max(date)+2, tail(deathsPer100k[order(date)],1), s, col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2))))
plot.new()
plot.window(xlim=c(max(a$date,na.rm=T)-X, max(a$date,na.rm=T)+2), ylim=range(subset(a, date >= max(date)-X)$casesPer100k, na.rm=T))
axis(2); axis(1, at=seq(a$date %>% as.numeric() %>% max-X,a$date %>% as.numeric() %>% max,by=7), labels=seq(max(a$date)-X, max(a$date), 7)); box('plot')
mtext(side=2, line=3, "Cases/100k")
sapply(levels(a$state), function(s) with(subset(a, state==s), lines(date[order(date)], casesPer100k[order(date)], col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2), lwd=stateColors$stateColor[which(stateColors$state==s)])))
sapply(levels(a$state), function(s) with(subset(a, state==s), text(max(date)+2, tail(casesPer100k,1), s, col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2))))
plot.new()
plot.window(xlim=c(max(a$date,na.rm=T)-X, max(a$date,na.rm=T)+2), ylim=c(0,0.4))
axis(2); axis(1, at=seq(a$date %>% as.numeric() %>% max-X,a$date %>% as.numeric() %>% max,by=7), labels=seq(max(a$date)-X, max(a$date), 7)); box('plot')
mtext(side=2, line=3, "Case positivity")
sapply(levels(a$state), function(s) with(subset(a, state==s), lines(date[order(date)], testPosRate[order(date)], col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2), lwd=stateColors$stateColor[which(stateColors$state==s)])))
sapply(levels(a$state), function(s) with(subset(a, state==s), text(max(date)+2, tail(testPosRate[order(date)],1), s, col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2))))
plot.new()
plot.window(xlim=c(max(a$date,na.rm=T)-X, max(a$date,na.rm=T)+2), ylim=range(subset(a, date >= max(date)-X)$casesPer100k, na.rm=T))
axis(2); axis(1, at=seq(a$date %>% as.numeric() %>% max-X,a$date %>% as.numeric() %>% max,by=7), labels=seq(max(a$date)-X, max(a$date), 7)); box('plot')
mtext(side=2, line=3, "Cases/100k")
sapply(levels(a$state), function(s) with(subset(a, state==s), lines(date[order(date)], casesPer100k[order(date)], col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2), lwd=stateColors$stateColor[which(stateColors$state==s)])))
sapply(levels(a$state), function(s) with(subset(a, state==s), text(max(date)+2, tail(casesPer100k,1), s, col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2))))
plot.new()
plot.window(xlim=c(max(z$date,na.rm=T)-X, max(z$date,na.rm=T)+2), ylim=range(subset(z, date >= max(date)-X)$casesPer100k, na.rm=T))
axis(2); axis(1, at=seq(z$date %>% as.numeric() %>% max-X,z$date %>% as.numeric() %>% max,by=7), labels=seq(max(z$date)-X, max(z$date), 7)); box('plot')
mtext(side=2, line=3, "Cases/100k")
sapply(levels(z$state), function(s) with(subset(z, state==s) %>% arrange(., date), lines(date, casesPer100k, col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2), lwd=stateColors$stateColor[which(stateColors$state==s)])))
sapply(levels(z$state), function(s) with(subset(z, state==s) %>% arrange(., date), text(max(date)+2, tail(casesPer100k,1), s, col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2))))
plot.new()
plot.window(xlim=c(max(z$date,na.rm=T)-X, max(z$date,na.rm=T)+2), ylim=c(0,max(subset(z, date >= max(date)-X)$testsPer100k, na.rm=T)))
axis(2); axis(1, at=seq(z$date %>% as.numeric() %>% max-X,z$date %>% as.numeric() %>% max,by=7), labels=seq(max(z$date)-X, max(z$date), 7)); box('plot')
mtext(side=2, line=3, "Tests/100k")
sapply(levels(z$state), function(s) with(subset(z, state==s) %>% arrange(., date), lines(date, testsPer100k, col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2), lwd=stateColors$stateColor[which(stateColors$state==s)])))
sapply(levels(z$state), function(s) with(subset(z, state==s) %>% arrange(., date), text(max(date)+2, tail(testsPer100k,1), s, col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2))))
knitr::opts_chunk$set(echo = TRUE,
dev=c('png','tiff'),
fig.path='figures/')
stochastic_strain_competition_w_drugs <- function(tmax, tstep, pars, y0, seed) {
set.seed(seed)
theta <- pars["theta"]
chi <- pars["chi"]
alpha1 <- pars["alpha1"]
alpha2 <- pars["alpha2"]
eta1 <- pars["eta1"]
eta2 <- pars["eta2"]
epsilon1 <- pars["epsilon1"]
epsilon2 <- pars["epsilon2"]
delta1 <- pars["delta1"]
delta2 <- pars["delta2"]
mu <- pars["mu"]
D <- pars["D"]
tDrug <- pars["tDrug"]
## initialize the time at t = 0
t <- 0
R <- y0["R"]
P1 <- y0["P1"]
P2 <- y0["P2"]
## initialize a dataframe to store the time and population size
sim <- array(NA, dim=c(1e5, 4))
sim[1,] <- c(t,R,P1,P2)
i <- 2
## start the algorithm
while (t < tmax) {
## compute rates
rates <- c(theta, ## add resource = 1
chi*R, ## host resource use = 2
alpha1*R/(eta1+R)*P1, ## strain 1 resource consumption = 3
alpha2*R/(eta2+R)*P2, ## strain 2 resource consumption = 4
epsilon1*alpha1*R/(eta1+R)*P1, ## strain 1 replication = 5
epsilon2*alpha2*R/(eta2+R)*P2, ## strain 2 replication = 6
ifelse(P1 > 0, ifelse(t > tDrug, delta1*P1 + D, delta1*P1), 0), ## strain 1 death = 7
delta2*P2, ## strain 2 death = 8
mu*P1, ## strain 1 mutating to strain 2 = 9
mu*P2) ## strain 2 mutating to strain 1 = 10
## what time does the event happen?
dt <- rexp(1, rate=sum(rates))
## update t
t <- t + dt
## "wheel of fortune"
wheel <- cumsum(rates)/sum(rates)
## which event happens? Draw a random uniform to determine
rand <- runif(1)
event <- 1 + sum(rand > wheel)
if (event==1) R <- R + 1
else if (event%in%2:4) R <- R - 1
else if (event==5) P1 <- P1 + 1
else if (event==6) P2 <- P2 + 1
else if (event==7) P1 <- P1 - 1
else if (event==8) P2 <- P2 - 1
else if (event==9) { P1 <- P1 -1; P2 <- P2 + 1}
else {P1 <- P1 + 1; P2 <- P2 - 1}
sim[i,] <- c(t, R, P1, P2)
i <- i + 1
}
sim <- sim[1:(i-1),]
## Clean up: we're recording **way** too much information here - only record every tstep time steps
lapply(seq(0,tmax,tstep), function(t) c(t,sim[((sim[,1] > t) %>% which %>% min)-1,2:4])) %>% do.call(rbind.data.frame,.) -> sim2
colnames(sim2) <- c("t","R","P1","P2")
return(sim2)
}
setwd("~/anorexia_resistance")
out10 <- readRDS("out_drug_no_anorexia_hi.RDS")
cutoff <- lapply(out10[[1]], function(o) tail(o[,4],10) %>% mean) %>% unlist %>% mean(.,na.rm=TRUE)
library(magrittrA)
library(magrittr)
## measure the probability of emergence as the probability that the abundance of the resistant strain over the final 10 time points is higher than the expected abundance based on the drug-free situation
cutoff <- lapply(out10[[1]], function(o) tail(o[,4],10) %>% mean) %>% unlist %>% mean(.,na.rm=TRUE)
lapply(1:length(out10),
function(i) (lapply(out10[[i]], function(o) (ifelse((!is.na(tail(o[,4],1))),tail(o[,4],10) %>% mean,0) > 2*cutoff)) %>% unlist %>% sum)/length(out10[[i]])) %>% unlist -> emergeProb10
par(mar=c(3,5,0.5,0.5))
plot(seq(0,5,0.25), emergeProb10, pch=21, bg=1, cex=1.5, xaxt='n', ylab="Probability of resistance", cex.lab=1.5, cex.axis=1.65)
axis(1,tick=TRUE,labels=FALSE)
mtext(side=1, line=1.5, "Drug dose", cex=1.65)
par(mar=c(3,5,0.5,0.5))
plot(seq(0,5,0.1), emergeProb10, pch=21, bg=1, cex=1.5, xaxt='n', ylab="Probability of resistance", cex.lab=1.5, cex.axis=1.65)
axis(1,tick=TRUE,labels=FALSE)
mtext(side=1, line=1.5, "Drug dose", cex=1.65)
lapply(1:length(out10),
function(i) lapply(out10[[i]],
function(o) ifelse(tail(o[,1],1) > 150,
c(o[(o[,1] > 150) %>% which %>% min,1], ifelse(any(o[,3]==0),
o[which(o[,3]==0) %>% min,1],
lapply(1:length(out10),
function(i) lapply(out10[[i]],
function(o) ifelse(tail(o[,1],1) > 150,
c(o[(o[,1] > 150) %>% which %>% min,1], ifelse(any(o[,3]==0),
o[which(o[,3]==0) %>% min,1],
350)) %>% diff,
NA)
) %>% unlist %>% mean(.,na.rm=TRUE)
) %>% unlist -> timeToExtinction
par(mar=c(3,5,0.5,0.5))
plot(seq(0,5,0.1), timeToExtinction, pch=21, bg=1, cex=1.5, xaxt='n', ylab="Time until susceptible extinction", cex.lab=1.5, cex.axis=1.65)
axis(1,tick=TRUE,labels=FALSE)
mtext(side=1, line=1.5, "Drug dose", cex=1.65)
par(mfrow=c(2,3), mar=c(3,3,0.5,0.5), oma=c(3,3,0,0))
lapply(out10[[1]], function(o) c(o[151,4],o[501,4])) %>% do.call(rbind.data.frame,.) -> x
x[is.na(x)] <- 0
plot(x[,1], x[,2], xlab="", ylab="")
legend(x='topleft', "Dose = 0", bty='n')
lapply(out10[[5]], function(o) c(o[151,4],o[501,4])) %>% do.call(rbind.data.frame,.) -> x
x[is.na(x)] <- 0
plot(x[,1], x[,2], xlab="", ylab="")
legend(x='topleft', "Dose = 1", bty='n')
lapply(out10[[9]], function(o) c(o[151,4],o[501,4])) %>% do.call(rbind.data.frame,.) -> x
x[is.na(x)] <- 0
plot(x[,1], x[,2], xlab="", ylab="")
legend(x='topleft', "Dose = 2", bty='n')
lapply(out10[[13]], function(o) c(o[151,4],o[501,4])) %>% do.call(rbind.data.frame,.) -> x
x[is.na(x)] <- 0
plot(x[,1], x[,2], xlab="", ylab="")
legend(x='topleft', "Dose = 3", bty='n')
lapply(out10[[17]], function(o) c(o[151,4],o[501,4])) %>% do.call(rbind.data.frame,.) -> x
x[is.na(x)] <- 0
plot(x[,1], x[,2], xlab="", ylab="")
legend(x='topleft', "Dose = 4", bty='n')
lapply(out10[[21]], function(o) c(o[151,4],o[501,4])) %>% do.call(rbind.data.frame,.) -> x
x[is.na(x)] <- 0
plot(x[,1], x[,2], xlab="", ylab="")
legend(x='topleft', "Dose = 5", bty='n')
mtext(side=1, outer=T, "Resistance at start of drugs")
mtext(side=2, outer=T, "Resistance at end")
out10 <- readRDS("out_drug_no_anorexia_lo.RDS")
## measure the probability of emergence as the probability that the abundance of the resistant strain over the final 10 time points is higher than the expected abundance based on the drug-free situation
cutoff <- lapply(out10[[1]], function(o) tail(o[,4],10) %>% mean) %>% unlist %>% mean(.,na.rm=TRUE)
lapply(1:length(out10),
function(i) (lapply(out10[[i]], function(o) (ifelse((!is.na(tail(o[,4],1))),tail(o[,4],10) %>% mean,0) > 2*cutoff)) %>% unlist %>% sum)/length(out10[[i]])) %>% unlist -> emergeProb10
par(mar=c(3,5,0.5,0.5))
plot(seq(0,5,0.1), emergeProb10, pch=21, bg=1, cex=1.5, xaxt='n', ylab="Probability of resistance", cex.lab=1.5, cex.axis=1.65)
axis(1,tick=TRUE,labels=FALSE)
mtext(side=1, line=1.5, "Drug dose", cex=1.65)
out10 <- readRDS("out_drug_no_anorexia_lo.RDS")
## measure the probability of emergence as the probability that the abundance of the resistant strain over the final 10 time points is higher than the expected abundance based on the drug-free situation
cutoff <- lapply(out10[[1]], function(o) tail(o[,4],10) %>% mean) %>% unlist %>% mean(.,na.rm=TRUE)
lapply(1:length(out10),
function(i) (lapply(out10[[i]], function(o) (ifelse((!is.na(tail(o[,4],1))),tail(o[,4],10) %>% mean,0) > 2*cutoff)) %>% unlist %>% sum)/length(out10[[i]])) %>% unlist -> emergeProb10
par(mar=c(3,5,0.5,0.5))
plot(seq(0,5,0.1), emergeProb10, pch=21, bg=1, cex=1.5, xaxt='n', ylab="Probability of resistance", cex.lab=1.5, cex.axis=1.65)
axis(1,tick=TRUE,labels=FALSE)
mtext(side=1, line=1.5, "Drug dose", cex=1.65)
D < seq(0,5,0.1)
D2 <- D^2
abline(lm(emergeProb10~D+D2), col=2)
D <- seq(0,5,0.1)
D2 <- D^2
abline(lm(emergeProb10~D+D2), col=2)
lm(emergeProb10~D+D2)
coef(lm(emergeProb10~D+D2))
coef(lm(emergeProb10~D+D2))
predict.lm(lm(emergeProb10~D+D2), newdata=data.frame(D=D, D2=D^2))
predict.lm(lm(emergeProb10~D+D2), newdata=data.frame(D=D, D2=D^2))
lines(D, predict.lm(lm(emergeProb10~D+D2), newdata=data.frame(D=D, D2=D^2)), col=2)
1500*0.1/(20*0.09-0.1)
1500*0.1/(20*0.1-0.1)
lapply(seq(0,5,0.2),
function(drug) {
print(drug)
pars <- c(theta=8, chi=0.1, alpha1=0.1, alpha2=0.09, eta1=1500, eta2=1500, epsilon1=20, epsilon2=20, delta1=0.1, delta2=0.1, mu=0.001, D=drug, tDrug=150)
mclapply(seeds,
function(s) stochastic_strain_competition_w_drugs(500, tstep=1, pars=pars, y0=c(R=unname(pars["theta"]/pars["chi"]), P1=10, P2=0), seed=s),
mc.cores=4)
}) -> out_drug_anorexia_hi
library(parallel0)
library(parallel)
lapply(seq(0,5,0.2),
function(drug) {
print(drug)
pars <- c(theta=8, chi=0.1, alpha1=0.1, alpha2=0.09, eta1=1500, eta2=1500, epsilon1=20, epsilon2=20, delta1=0.1, delta2=0.1, mu=0.001, D=drug, tDrug=150)
mclapply(seeds,
function(s) stochastic_strain_competition_w_drugs(500, tstep=1, pars=pars, y0=c(R=unname(pars["theta"]/pars["chi"]), P1=10, P2=0), seed=s),
mc.cores=4)
}) -> out_drug_anorexia_hi
seeds <- readRDS("seeds.RDS")
lapply(seq(0,5,0.2),
function(drug) {
print(drug)
pars <- c(theta=8, chi=0.1, alpha1=0.1, alpha2=0.09, eta1=1500, eta2=1500, epsilon1=20, epsilon2=20, delta1=0.1, delta2=0.1, mu=0.001, D=drug, tDrug=150)
mclapply(seeds,
function(s) stochastic_strain_competition_w_drugs(500, tstep=1, pars=pars, y0=c(R=unname(pars["theta"]/pars["chi"]), P1=10, P2=0), seed=s),
mc.cores=4)
}) -> out_drug_anorexia_hi
lapply(seq(0,5,0.1),
function(drug) {
print(drug)
pars <- c(theta=8, chi=0.1, alpha1=0.1, alpha2=0.09, eta1=1500, eta2=1500, epsilon1=20, epsilon2=20, delta1=0.1, delta2=0.1, mu=0.001, D=drug, tDrug=150)
mclapply(seeds,
function(s) stochastic_strain_competition_w_drugs(500, tstep=1, pars=pars, y0=c(R=unname(pars["theta"]/pars["chi"]), P1=10, P2=0), seed=s),
mc.cores=4)
}) -> out_drug_anorexia_hi
lapply(seq(0,5,0.1),
function(drug) {
print(drug)
pars <- c(theta=8, chi=0.1, alpha1=0.1, alpha2=0.09, eta1=1500, eta2=1500, epsilon1=20, epsilon2=20, delta1=0.1, delta2=0.1, mu=0.0001, D=drug, tDrug=150)
mclapply(seeds,
function(s) stochastic_strain_competition_w_drugs(500, tstep=1, pars=pars, y0=c(R=unname(pars["theta"]/pars["chi"]), P1=10, P2=0), seed=s),
mc.cores=4)
}) -> out_drug_anorexia_lo
cutoff <- lapply(out_drug_anorexia_hi[[1]], function(o) tail(o[,4],10) %>% mean) %>% unlist %>% mean(.,na.rm=TRUE)
lapply(1:length(out_drug_anorexia_hi),
function(i) (lapply(out_drug_anorexia_hi[[i]], function(o) (ifelse((!is.na(tail(o[,4],1))),tail(o[,4],10) %>% mean,0) > 2*cutoff)) %>% unlist %>% sum)/length(out10[[i]])) %>% unlist -> emergeProb
lapply(1:length(out_drug_anorexia_lo),
function(i) (lapply(out_drug_anorexia_lo[[i]], function(o) (ifelse((!is.na(tail(o[,4],1))),tail(o[,4],10) %>% mean,0) > 2*cutoff)) %>% unlist %>% sum)/length(out_drug_anorexia_lo[[i]])) %>% unlist -> emergeProb2
emergeProb1
emergeProb2
emergeProb10
cutoff
lapply(1:length(out_drug_anorexia_hi),
function(i) (lapply(out_drug_anorexia_hi[[i]], function(o) (ifelse((!is.na(tail(o[,4],1))),tail(o[,4],10) %>% mean,0) > 20)) %>% unlist %>% sum)/length(out_drug_anorexia_hi[[i]])) %>% unlist -> emergeProb1
emergeProb1
lapply(1:length(out_drug_anorexia_lo),
function(i) (lapply(out_drug_anorexia_lo[[i]], function(o) (ifelse((!is.na(tail(o[,4],1))),tail(o[,4],10) %>% mean,0) > 20)) %>% unlist %>% sum)/length(out_drug_anorexia_lo[[i]])) %>% unlist -> emergeProb2
emergeProb2
par(mar=c(3,5,0.5,0.5))
plot(seq(0,5,0.1), emergeProb1, pch=21, bg=1, cex=1.5, xaxt='n', ylab="Probability of resistance", cex.lab=1.5, cex.axis=1.65)
points(seq(0,0.5,0.1)+0.025, emergeProb2, pch=21, bg=2)
axis(1,tick=TRUE,labels=FALSE)
mtext(side=1, line=1.5, "Drug dose", cex=1.65)
par(mar=c(3,5,0.5,0.5))
plot(seq(0,5,0.1), emergeProb1, pch=21, bg=1, cex=1, xaxt='n', ylab="Probability of resistance", cex.lab=1.5, cex.axis=1.65)
points(seq(0,0.5,0.1)+0.025, emergeProb2, pch=21, bg=2)
axis(1,tick=TRUE,labels=FALSE)
mtext(side=1, line=1.5, "Drug dose", cex=1.65)
points(seq(0,5,0.1)+0.25, emergeProb2, pch=21, bg=2)
legend(x='topright', c("High mutation rate", "Low mutation rate", bg.col=c(1,2)))
par(mar=c(3,5,0.5,0.5))
plot(seq(0,5,0.1), emergeProb1, pch=21, bg=1, cex=1, xaxt='n', ylab="Probability of resistance", cex.lab=1.5, cex.axis=1.65)
points(seq(0,5,0.1)+0.25, emergeProb2, pch=21, bg=2)
axis(1,tick=TRUE,labels=FALSE)
mtext(side=1, line=1.5, "Drug dose", cex=1.65)
legend(x='topright', c("High mutation rate", "Low mutation rate", bg.col=c(1,2)))
?legend
par(mar=c(3,5,0.5,0.5))
plot(seq(0,5,0.1), emergeProb1, pch=21, bg=1, cex=1, xaxt='n', ylab="Probability of resistance", cex.lab=1.5, cex.axis=1.65)
points(seq(0,5,0.1)+0.25, emergeProb2, pch=21, bg=2)
axis(1,tick=TRUE,labels=FALSE)
mtext(side=1, line=1.5, "Drug dose", cex=1.65)
legend(x='topright', c("High mutation rate", "Low mutation rate", pt.bg=c(1,2)))
par(mar=c(3,5,0.5,0.5))
plot(seq(0,5,0.1), emergeProb1, pch=21, bg=1, cex=1, xaxt='n', ylab="Probability of resistance", cex.lab=1.5, cex.axis=1.65)
points(seq(0,5,0.1)+0.25, emergeProb2, pch=21, bg=2)
axis(1,tick=TRUE,labels=FALSE)
mtext(side=1, line=1.5, "Drug dose", cex=1.65)
legend(x='topright', c("High mutation rate", "Low mutation rate", pch=21, pt.bg=c(1,2)))
par(mar=c(3,5,0.5,0.5))
plot(seq(0,5,0.1), emergeProb1, pch=21, bg=1, cex=1, xaxt='n', ylab="Probability of resistance", cex.lab=1.5, cex.axis=1.65)
points(seq(0,5,0.1)+0.25, emergeProb2, pch=21, bg=2)
axis(1,tick=TRUE,labels=FALSE)
mtext(side=1, line=1.5, "Drug dose", cex=1.65)
legend(x='topright', c("High mutation rate", "Low mutation rate"), pch=21, pt.bg=c(1,2))
View(tmp)
out_drug_anorexia_hi <- readRDS("out_drug_variable_anorexia_hi.RDS")
out_drug_anorexia_lo <- readRDS("out_drug_variable_anorexia_lo.RDS")
lapply(1:length(out_drug_anorexia_hi),
function(i) (lapply(out_drug_anorexia_hi[[i]], function(o) (ifelse((!is.na(tail(o[,4],1))),tail(o[,4],10) %>% mean,0) > 20)) %>% unlist %>% sum)/length(out_drug_anorexia_hi[[i]])) %>% unlist -> emergeProb1
lapply(1:length(out_drug_anorexia_lo),
function(i) (lapply(out_drug_anorexia_lo[[i]], function(o) (ifelse((!is.na(tail(o[,4],1))),tail(o[,4],10) %>% mean,0) > 20)) %>% unlist %>% sum)/length(out_drug_anorexia_lo[[i]])) %>% unlist -> emergeProb2
par(mar=c(3,5,0.5,0.5))
plot(seq(0,5,0.1), emergeProb1, pch=21, bg=1, cex=1, xaxt='n', ylab="Probability of resistance", cex.lab=1.5, cex.axis=1.65)
points(seq(0,5,0.1)+0.25, emergeProb2, pch=21, bg=2)
axis(1,tick=TRUE,labels=FALSE)
mtext(side=1, line=1.5, "Drug dose", cex=1.65)
legend(x='topright', c("High mutation rate", "Low mutation rate"), pch=21, pt.bg=c(1,2))
par(mar=c(3,5,0.5,0.5))
plot(seq(0,5,0.1), emergeProb1, pch=21, bg=1, cex=1, xaxt='n', ylab="Probability of resistance", cex.lab=1.5, cex.axis=1.65)
points(seq(0,5,0.1)+0.25, emergeProb2, pch=21, bg=2)
axis(1,tick=TRUE,labels=FALSE)
mtext(side=1, line=1.5, "Drug dose", cex=1.65)
legend(x='topleft', c("High mutation", "Low mutation"), pch=21, pt.bg=c(1,2), bty='n')
par(mar=c(3,5,0.5,0.5))
plot(seq(0,5,0.1), emergeProb1, pch=21, bg=1, cex=1, xaxt='n', ylab="Probability of resistance", cex.lab=1.5, cex.axis=1.65)
points(seq(0,5,0.1), emergeProb2, pch=21, bg=2)
axis(1,tick=TRUE,labels=FALSE)
mtext(side=1, line=1.5, "Drug dose", cex=1.65)
legend(x='topleft', c("High mutation", "Low mutation"), pch=21, pt.bg=c(1,2), bty='n')
saveRDS(out_drug_anorexia_hi, file="out_drug_anorexia_hi.RDS")
saveRDS(out_drug_anorexia_lo, file="out_drug_anorexia_lo.RDS")
